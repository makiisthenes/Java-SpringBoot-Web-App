<?xml version="1.0" encoding="UTF-8"?>
<!-- Project Object Models, configur about project assembly, /target is for the build files, /src is for the source files. -->
<!-- Maven Build Tool understanding: https://www.youtube.com/watch?v=bBqxC43ASsM, really useful if doing this. -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.2.4</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.michaelperes</groupId>
	<artifactId>content-calender</artifactId>
	<version>0.0.1-SNAPSHOT</version>  <!-- Snapshot keyword means it is still in development and has frequent development changes to maven. It updates dependencies once a day in snapshot whereas as not in RELEASE or None. -->
	<!-- We can define the packaging of the project to be JAR (java archive), WAR (web archive), EAR (enterprise archive) but by default we use JAR. -->
	<packaging>jar</packaging>
	<!-- Maven, unlike ANT, creates only one executable JAR file within project, but in ANT you can generate multiple JAR (executable) files. -->

	<!-- Info tags, and not important for the project. -->
	<name>content-calender</name>
	<description>Content Calender REST API</description>
	<url>https://peresmichael.com/</url>

	<!-- Custom Properties, holds versions of dependencies, plugins, etc in one place. -->
	<properties>
		<java.version>17</java.version>
		<maven.compiler.source>17</maven.compiler.source>
		<maven.compiler.target>17</maven.compiler.target>
	</properties>

	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>  <!-- Spring Boot Starter Web, Starter will have all the compromises of all these dependencies we need. -->

			<!--
				Within scope of dependency there is 4 scopes, compile, provided, runtime and test, which makes the dependencies in these different stages.
				This includes compile which runs on code compilation, runtime and test.

				Provided, is on code compilation and test, but not runtime. (something like library lombok).
				Runtime, is on runtime and test, but not on code compilation.
				Test, is only on compile and test.
			-->
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<!--		Databases Options Dependencies-->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>

<!--		<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-jdbc</artifactId>-->
<!--		</dependency>-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jdbc</artifactId>
		</dependency>

<!--		<dependency>-->
<!--			<groupId>org.postgresql</groupId>-->
<!--			<artifactId>postgresql</artifactId>-->
<!--			<scope>runtime</scope>-->
<!--		</dependency>-->

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>

			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>17</source>
					<target>17</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

</project>

<!-- Using MVN commands to work with project, using video: https://www.youtube.com/watch?v=Xatr8AZLOsE -->
<!-- mvn wrapper, this will create a maven wrapper, which will allow us to run maven commands without having to install maven on the system. -->
<!-- ./mvnw clean install, this will clean the project, install the dependencies and build the project. -->
